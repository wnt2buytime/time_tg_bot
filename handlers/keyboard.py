"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes

from utils.storage import (
    user_dates, user_notifications, has_user_date, get_user_date, 
    get_user_notification, has_user_notification
)
from utils.time_utils import calculate_time_left, format_time_left, is_date_passed

logger = logging.getLogger(__name__)


async def handle_keyboard_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if not update.message:
        return
        
    text = update.message.text
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: '{text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}")
    
    if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await show_settings_keyboard(update, context)
    elif text == "‚è∞ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è":
        await show_time_left_menu(update, context)
    elif text == "üîô –ù–∞–∑–∞–¥":
        await show_main_keyboard(update, context)
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞: '{text}'")


async def show_settings_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    settings_text = """
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    keyboard = [
        [KeyboardButton("üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É"), KeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    await update.message.reply_text(
        settings_text,
        reply_markup=reply_markup
    )


async def show_main_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    main_text = """
ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton("‚è∞ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è")]
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    await update.message.reply_text(
        main_text,
        reply_markup=reply_markup
    )


async def show_settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ –¥–∞—Ç–∞
    if not has_user_date(user_id):
        await update.message.reply_text(
            "‚ùå –î–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É'"
        )
        return
    
    current_notification = get_user_notification(user_id) or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
    target_date = get_user_date(user_id)
    
    settings_text = f"""
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏

üìÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –¥–∞—Ç–∞: {target_date.strftime('%d.%m.%Y')}
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {current_notification}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
‚Ä¢ üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É - –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    
    await update.message.reply_text(settings_text)


async def show_time_left_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = update.message.from_user.id
    
    if not has_user_date(user_id):
        await update.message.reply_text(
            "‚ùå –î–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É'"
        )
        return
    
    target_date = get_user_date(user_id)
    
    if is_date_passed(target_date):
        await update.message.reply_text(
            "üéâ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª–∞!\n\n"
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É'"
        )
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å
    days, hours, minutes = calculate_time_left(target_date)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    time_text = format_time_left(days, hours, minutes, target_date)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
    if has_user_notification(user_id):
        notification_time = get_user_notification(user_id)
        time_text += f"\n\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ {notification_time}"
    else:
        time_text += f"\n\nüîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    
    await update.message.reply_text(time_text)


async def set_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É 'üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É'")
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ conversations
    from handlers.conversations import start_set_date
    await start_set_date(update, context)


async def notifications_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ conversations
    from handlers.conversations import start_notifications
    await start_notifications(update, context) 