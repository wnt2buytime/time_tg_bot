"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
"""
from datetime import datetime, timedelta
from typing import Tuple


def calculate_time_left(target_date: datetime) -> Tuple[int, int, int]:
    """
    –í—ã—á–∏—Å–ª–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –¥–∞—Ç—ã
    
    Returns:
        Tuple[int, int, int]: (–¥–Ω–∏, —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã)
    """
    now = datetime.now()
    time_diff = target_date - now
    
    days = time_diff.days
    hours = time_diff.seconds // 3600
    minutes = (time_diff.seconds % 3600) // 60
    
    return days, hours, minutes


def format_time_left(days: int, hours: int, minutes: int, target_date: datetime) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    
    Args:
        days: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        hours: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
        minutes: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
        target_date: —Ü–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞
        
    Returns:
        str: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    """
    if days > 0:
        time_text = f"üìÖ –î–æ {target_date.strftime('%d.%m.%Y')} –æ—Å—Ç–∞–ª–æ—Å—å:\n\n"
        time_text += f"üïê {days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç"
    else:
        time_text = f"üìÖ –î–æ {target_date.strftime('%d.%m.%Y')} –æ—Å—Ç–∞–ª–æ—Å—å:\n\n"
        time_text += f"üïê {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç"
    
    return time_text


def is_date_in_future(date: datetime) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
    
    Args:
        date: –ø—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –¥–∞—Ç–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
    """
    return date > datetime.now()


def is_date_passed(date: datetime) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞
    
    Args:
        date: –ø—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –¥–∞—Ç–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞
    """
    return date <= datetime.now()


def parse_date(date_text: str) -> datetime:
    """
    –ü–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì
    
    Args:
        date_text: —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π
        
    Returns:
        datetime: –æ–±—ä–µ–∫—Ç –¥–∞—Ç—ã
        
    Raises:
        ValueError: –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–≤–µ—Ä–Ω—ã–π
    """
    return datetime.strptime(date_text, "%d.%m.%Y")


def parse_time(time_text: str) -> datetime:
    """
    –ü–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ß–ß:–ú–ú
    
    Args:
        time_text: —Å—Ç—Ä–æ–∫–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
        
    Returns:
        datetime: –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–∏
        
    Raises:
        ValueError: –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π
    """
    return datetime.strptime(time_text, "%H:%M") 