"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –¥–∞—Ç—ã
"""
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters

from config import BOT_TOKEN
from handlers.commands import start_command, help_command, time_left_command
from handlers.keyboard import handle_keyboard_button
from handlers.conversations import (
    start_set_date, start_notifications, process_date_input, process_notification_time, 
    conversation_button_callback, cancel, WAITING_FOR_DATE, WAITING_FOR_NOTIFICATION_TIME
)
from services.scheduler_service import start_scheduler, set_application

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


def setup_handlers(application: Application) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã
    from telegram.ext import ConversationHandler
    date_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("set_date", start_set_date),
            MessageHandler(filters.Regex(r'^üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É$'), start_set_date)
        ],
        states={
            WAITING_FOR_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_date_input),
                CallbackQueryHandler(conversation_button_callback)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("notifications", start_notifications),
            MessageHandler(filters.Regex(r'^üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è$'), start_notifications)
        ],
        states={
            WAITING_FOR_NOTIFICATION_TIME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_notification_time),
                CallbackQueryHandler(conversation_button_callback)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("time_left", time_left_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–¥ –æ–±—â–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏)
    application.add_handler(date_conv_handler)
    application.add_handler(notification_conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö ConversationHandler)
    keyboard_filter = filters.Regex(r'^(‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏|‚è∞ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è|üîô –ù–∞–∑–∞–¥)$')
    application.add_handler(MessageHandler(keyboard_filter, handle_keyboard_button))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback –∫–Ω–æ–ø–æ–∫ (–≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ)
    application.add_handler(CallbackQueryHandler(conversation_button_callback))


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–µ—Ä–≤–∏—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    set_application(application)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setup_handlers(application)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    start_scheduler()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main() 